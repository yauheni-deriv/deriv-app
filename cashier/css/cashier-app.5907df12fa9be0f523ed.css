/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.cashier__transferred-icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .cashier__transferred-icon .color1-fill {
    fill: var(--text-general); }
  .cashier__transferred-icon .color1-stroke {
    stroke: var(--text-general); }
  .cashier__transferred-icon .color2-fill {
    fill: none; }
  .cashier__transferred-icon .color2-stroke {
    stroke: none; }
  .active.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .active.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
    .active.cashier__transferred-icon .color2-fill {
      fill: none; }
    .active.cashier__transferred-icon .color2-stroke {
      stroke: none; }
  .disabled.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.cashier__transferred-icon .color1-fill {
      fill: var(--text-disabled); }
    .disabled.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.cashier__transferred-icon .color2-fill {
      fill: none; }
    .disabled.cashier__transferred-icon .color2-stroke {
      stroke: none; }
  .white.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .white.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.cashier__transferred-icon .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.cashier__transferred-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.cashier__transferred-icon .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.cashier__transferred-icon .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
/** @define cashier; weak */
.cashier__counter {
  position: absolute;
  top: 0.4rem;
  right: -1.5rem; }

.cashier__content {
  width: 100%; }
  .cashier__content-header {
    margin-bottom: 3.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__content-header {
        padding-top: 1.6rem;
        margin-bottom: 0; } }

.cashier__wrapper {
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center; }
  .cashier__wrapper, .cashier__wrapper--align-left {
    color: var(--text-general);
    width: 100%;
    height: 100%;
    line-height: 1.43; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__wrapper, .cashier__wrapper--align-left {
        height: inherit; } }
    @media (max-width: 926px) {
      .cashier__wrapper, .cashier__wrapper--align-left {
        width: auto;
        height: auto;
        margin: 0 1.6rem; } }
    .cashier__wrapper .inline-icon .color1-fill, .cashier__wrapper--align-left .inline-icon .color1-fill {
      fill: var(--text-general); }
  .cashier__wrapper--align-left {
    text-align: left; }
  .cashier__wrapper-padding {
    padding: 1.6rem; }
  .cashier__wrapper--align-center {
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center; }
  @media (max-width: 926px) {
    .cashier__wrapper--is-mobile {
      width: 100vw; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__wrapper--is-mobile {
      width: 100vw;
      margin-top: 4rem; }
      .cashier__wrapper--is-mobile .dc-collapsible {
        position: relative;
        background-color: var(--general-section-1);
        margin-bottom: 0.8rem;
        transform: none;
        width: 100%;
        z-index: 1; }
      .cashier__wrapper--is-mobile .cashier__wrapper {
        width: calc(100% - 3.2rem);
        margin: 0 1.6rem; }
        .cashier__wrapper--is-mobile .cashier__wrapper-error {
          display: flex;
          align-items: center;
          justify-content: flex-start;
          flex-direction: column;
          padding-top: 2.4rem; }
      .cashier__wrapper--is-mobile .barspinner {
        margin-top: 6rem; } }
  .cashier__wrapper .withdraw__input {
    margin: 2.4rem 0 !important; }
  .cashier__wrapper .withdraw__input {
    width: -moz-fit-content;
    width: fit-content;
    min-width: 36rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier__wrapper .withdraw__input {
        margin-bottom: 2.6rem !important; }
      .cashier__wrapper .withdraw__input {
        width: 100%;
        min-width: auto; } }

.cashier__loader {
  font-size: 1rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .cashier__header {
    font-size: 1.4rem; } }

.cashier__form-submit {
  text-align: right; }

.cashier__form-submit-button {
  margin: 3.9rem 0 2.4rem 2.4rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .cashier__form-submit {
    margin: 1.6rem 0;
    flex-flow: column;
    height: auto;
    height: initial;
    margin-bottom: 1.6rem; }
  .cashier__form-submit-button {
    margin: 0;
    width: 100%; } }

.cashier__input {
  display: inline-block !important;
  margin-bottom: 0 !important; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__input {
      margin-bottom: 3.2rem !important; } }

.cashier__drop-down-wrapper,
.cashier__drop-down-wrapper .cashier__drop-down-wrapper {
  display: flex;
  flex-direction: column; }
  .cashier__drop-down-wrapper .dc-select-native__placeholder,
  .cashier__drop-down-wrapper .cashier__drop-down-wrapper .dc-select-native__placeholder {
    background-color: var(--general-main-1); }

.cashier__drop-down-display,
.cashier__drop-down-wrapper .cashier__drop-down-display {
  justify-content: left;
  min-height: 4rem;
  min-width: 28.3rem;
  height: auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__drop-down-display,
    .cashier__drop-down-wrapper .cashier__drop-down-display {
      min-height: auto;
      min-width: calc(100% - 4rem);
      display: flex;
      align-items: center; } }
  .cashier__drop-down-display-span,
  .cashier__drop-down-wrapper .cashier__drop-down-display-span {
    font-size: 1.4rem;
    text-align: left;
    padding: 0.9rem 3.6rem 0.9rem 1.2rem;
    text-transform: none;
    line-height: 1.43;
    display: flex;
    align-items: center; }

.cashier__drop-down-items, .cashier__drop-down-label,
.cashier__drop-down-wrapper .cashier__drop-down-items,
.cashier__drop-down-wrapper .cashier__drop-down-label {
  justify-content: left; }

.cashier__drop-down-items svg,
.cashier__drop-down-wrapper .cashier__drop-down-items svg {
  width: 2.4rem;
  height: 2.4rem; }

.cashier__drop-down-label,
.cashier__drop-down-wrapper .cashier__drop-down-label {
  margin: 0 1.6rem; }

.cashier__transferred-amount {
  margin-top: 2rem;
  margin-bottom: 2.4rem; }
  .cashier__transferred-amount .symbols {
    padding-left: 0.8rem; }

.cashier__transferred-details {
  margin-left: 0.8rem;
  margin-right: 0.8rem;
  vertical-align: super;
  max-width: 20rem;
  display: flex;
  flex-direction: column; }
  .cashier__transferred-details-wrapper {
    display: flex;
    justify-content: center;
    align-items: center; }

.cashier__transferred-icon {
  transform: scale(-1, 1);
  vertical-align: middle;
  margin: 0 1.6rem; }

.cashier__paragraph {
  align-self: center; }

.cashier__text {
  max-width: 70%;
  margin-left: auto;
  margin-right: auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier__text {
      max-width: 100%;
      min-width: 0;
      min-width: initial;
      margin: 0;
      padding: 0;
      text-align: left; } }

.cashier__tab-header-note {
  max-width: 25.6rem; }

.cashier__success {
  text-align: center;
  background-color: var(--general-main-1);
  padding: 2.4rem;
  width: 50.4rem;
  margin: 0 auto 2rem; }

.cashier__done-button {
  width: 18.9rem;
  margin-left: 0.8rem;
  white-space: normal; }

.cashier__no-balance-icon {
  margin-bottom: 1.6rem; }
  .cashier__no-balance-icon + .dc-text {
    margin-bottom: 0.8rem; }

.cashier__no-balance-button {
  margin: 3.2rem auto; }

@media (min-width: 320px) and (max-width: 767px) {
  .cashier__no-balance {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center; }
    .cashier__no-balance-button {
      width: calc(100% - 3.2rem); }
    .cashier__no-balance-icon {
      margin-top: 3.2rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .cashier__page-wrapper {
    /* postcss-bem-linter: ignore */ }
    .cashier__page-wrapper .dc-page-overlay__header {
      position: fixed;
      top: 4rem;
      width: 100%;
      height: 4rem; }
    .cashier__page-wrapper .dc-page-overlay__header.dc-page-app__header {
      top: 0rem; } }

.cashier__page-wrapper-button {
  min-width: 25.6rem;
  padding: 0.6rem 0.8rem; }

.cashier__page-wrapper .acc-prompt-dialog {
  padding: 0 1rem; }

.cashier-locked {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 67.2rem;
  margin: 4rem auto 0;
  /* stylelint-disable-next-line plugin/selector-bem-pattern */
  /* stylelint-disable-next-line plugin/selector-bem-pattern */ }
  .cashier-locked .dc-checklist {
    width: 100%;
    max-width: 50rem; }
  .cashier-locked .dc-checklist__item-text {
    max-width: 32rem; }
  .cashier-locked__icon {
    width: 12.8rem;
    height: 12.8rem;
    margin-bottom: 2.4rem; }
  .cashier-locked__title {
    margin-bottom: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-locked__title {
        margin-left: 1.2rem;
        margin-right: 1.2rem; } }
  .cashier-locked__desc {
    margin-bottom: 3.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-locked__desc {
        padding: 0 1rem; } }

.cashier .dc-vertical-tab__content-side-note {
  position: sticky;
  top: calc(2.4rem + 4.1rem);
  height: -moz-fit-content;
  height: fit-content; }

@media (max-width: 926px) {
  .app-contents--is-mobile,
  .app-contents--is-scrollable {
    overflow-y: auto; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.error__icon {
  margin-top: 2rem;
  width: 6.4rem;
  height: 6.4rem;
  margin-bottom: 1.6rem; }

.error__header {
  margin-bottom: 0.8rem; }

.error__button {
  margin: 3.2rem auto 1.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .error__button {
      width: calc(100% - 3.2rem); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.virtual__header {
  margin-top: 0;
  margin-bottom: 1.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .virtual__header {
      padding-top: 2.4rem; } }

.virtual__account-switch-icon {
  box-sizing: border-box;
  width: 33.6rem;
  height: 20.8rem;
  background-repeat: no-repeat;
  background-size: 100%;
  margin: 0 auto 1rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .virtual__account-switch-icon {
      width: 100%;
      margin: 2.4rem 0 0; } }
  .virtual__account-switch-icon--light {
    background-image: url(/cashier/public/images/cashier-demo-light.e69b0cb941dd65480866365959a517ae.svg); }
  .virtual__account-switch-icon--dark {
    background-image: url(/cashier/public/images/cashier-demo-dark.605d2c476f169a7b73a8c7ea5312606b.svg); }

.virtual__account-switch-text {
  color: var(--text-loss-danger);
  cursor: pointer;
  font-weight: bold; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.cashier-empty-state {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 67.2rem;
  margin: 4rem auto 0; }
  .cashier-empty-state__icon {
    width: 12.8rem;
    height: 12.8rem;
    margin-bottom: 2.4rem; }
  .cashier-empty-state__title {
    margin-bottom: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-empty-state__title {
        margin-left: 1.2rem;
        margin-right: 1.2rem; } }
  .cashier-empty-state__desc {
    margin-bottom: 3.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-empty-state__desc {
        padding: 0 1rem; } }
  .cashier-empty-state__action {
    margin: 3.2rem auto; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.crypto-transactions-history {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column; }
  .crypto-transactions-history__header {
    display: flex;
    align-items: center;
    margin-bottom: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__header {
        display: block;
        margin: 1.6rem; } }
  .crypto-transactions-history__back {
    display: flex;
    align-items: center;
    cursor: pointer; }
    .crypto-transactions-history__back .dc-text {
      margin-left: 0.8rem;
      width: -moz-max-content;
      width: max-content; }
      @media (min-width: 320px) and (max-width: 767px) {
        .crypto-transactions-history__back .dc-text {
          margin-left: 2.2rem; } }
  .crypto-transactions-history__table {
    display: flex;
    flex-direction: column;
    height: 100%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__table {
        padding: 1.6rem; } }
    .crypto-transactions-history__table-body {
      flex: 1;
      display: flex;
      flex-direction: column; }
      @media (min-width: 1024px) {
        .crypto-transactions-history__table-body {
          min-height: 72vh; }
          .crypto-transactions-history__table-body .data-list,
          .crypto-transactions-history__table-body .data-list__body-wrapper {
            flex: 1; } }
    .crypto-transactions-history__table-row {
      padding: 1.6rem;
      grid-template-columns: repeat(6, 1fr) 0.5fr;
      border: 0; }
      @media (min-width: 320px) and (max-width: 767px) {
        .crypto-transactions-history__table-row {
          display: flex;
          flex-direction: column;
          border-radius: 0.8rem;
          background-color: var(--general-section-1); } }
      @media (min-width: 1024px) {
        .crypto-transactions-history__table-row .dc-table__cell:not(.crypto-transactions-history__table-confirm) {
          margin-right: 1.6rem; } }
    .crypto-transactions-history__table-cell {
      margin-bottom: 0.8rem; }
    .crypto-transactions-history__table-type {
      text-transform: capitalize; }
      @media (min-width: 320px) and (max-width: 767px) {
        .crypto-transactions-history__table-type {
          margin-left: 1.2rem;
          flex: 1; } }
      .crypto-transactions-history__table-type .dc-text {
        margin-left: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__table-amount {
        margin-bottom: 0.8rem; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__table-hash {
        margin-bottom: 0.8rem; } }
    .crypto-transactions-history__table-hash a {
      text-decoration: none; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__table-time {
        margin-bottom: 0.8rem; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__table-status {
        display: flex;
        align-items: center; } }
    .crypto-transactions-history__table-status-code {
      width: 1rem;
      height: 1rem;
      margin-right: 0.8rem;
      border-radius: 50%;
      background-color: var(--status-warning); }
      @media (min-width: 320px) and (max-width: 767px) {
        .crypto-transactions-history__table-status-code {
          width: 0.8rem;
          height: 0.8rem; } }
      .crypto-transactions-history__table-status-code-in-process {
        background-color: var(--status-warning); }
      .crypto-transactions-history__table-status-code-in-review {
        background-color: var(--status-warning); }
      .crypto-transactions-history__table-status-code-successful {
        background-color: var(--status-success); }
      .crypto-transactions-history__table-status-code-unsuccessful {
        background-color: var(--status-danger); }
    .crypto-transactions-history__table-status .dc-popover__target {
      display: flex;
      align-items: center; }
    .crypto-transactions-history__table-popover {
      cursor: pointer; }
      .crypto-transactions-history__table-popover a {
        text-decoration: none; }
    .crypto-transactions-history__table-confirm {
      justify-content: center;
      grid-column: 5 / 9; }
      .crypto-transactions-history__table-confirm div {
        display: flex;
        align-items: center;
        margin: 0.2rem 3.2rem; }
      .crypto-transactions-history__table-confirm .dc-btn {
        margin-right: 0.8rem; }
    @media (min-width: 1024px) {
      .crypto-transactions-history__table-action {
        justify-content: center; } }
  .crypto-transactions-history__data-list {
    flex: 1; }
    .crypto-transactions-history__data-list__data-list-body {
      flex: 1; }
    .crypto-transactions-history__data-list .data-list__body-wrapper {
      flex: 1; }
  .crypto-transactions-history__bullet {
    background-color: var(--text-general);
    border-radius: 100%;
    margin: 0 0.8rem;
    width: 0.4rem;
    height: 0.4rem;
    margin-bottom: 0.2rem;
    display: inline-block; }
  .crypto-transactions-history__empty-text {
    position: absolute;
    top: 20%;
    left: 10%;
    width: 50%;
    margin: auto; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-transactions-history__empty-text {
        position: static; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.account-transfer-receipt__crypto {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  padding-top: 2.4rem; }
  .account-transfer-receipt__crypto--details {
    display: flex; }
    .account-transfer-receipt__crypto--details-wrapper {
      display: flex;
      align-items: center;
      flex-direction: column;
      width: 100%;
      padding: 0 1.8rem; }
      @media (min-width: 1024px) {
        .account-transfer-receipt__crypto--details-wrapper {
          max-width: 40rem; } }
      .account-transfer-receipt__crypto--details-wrapper .crypto-transferred-icon {
        margin: 3.2rem 0; }
      .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-from, .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-to {
        border: 1px solid var(--border-normal);
        border-radius: 8px;
        padding: 1.2rem 3.4rem;
        width: 100%; }
        .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-from-details, .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-to-details {
          display: flex;
          align-items: center;
          justify-content: center;
          margin-bottom: 0.8rem; }
          .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-from-details .dc-text, .account-transfer-receipt__crypto--details-wrapper .crypto-transfer-to-details .dc-text {
            margin-left: 0.8rem; }
  .account-transfer-receipt__crypto--amount {
    margin: 1.8rem 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-receipt__crypto--form-submit {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 2rem 0 4rem; }
      .account-transfer-receipt__crypto--form-submit .dc-btn--primary {
        margin: 0 auto;
        width: 100%; }
      .account-transfer-receipt__crypto--form-submit .dc-btn--secondary {
        margin: 2rem auto; } }

.account-transfer-receipt__button {
  margin: 4rem auto 0 0.8rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-receipt__button {
      width: 100%; } }
  .account-transfer-receipt__button-statement {
    margin-right: 0.8rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.crypto-fiat-converter {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  grid-gap: 0.8rem;
  align-items: center; }
  @media (min-width: 1024px) {
    .crypto-fiat-converter {
      max-width: 36rem;
      margin: 0 auto 2.4rem; }
      .crypto-fiat-converter .dc-input {
        margin-bottom: 0;
        margin-bottom: initial; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-fiat-converter {
      display: flex;
      flex-direction: column; }
      .crypto-fiat-converter fieldset {
        width: 100%; }
      .crypto-fiat-converter .dc-input {
        margin-bottom: 1rem; }
      .crypto-fiat-converter .dc-icon {
        margin: 1.4rem; } }
  .crypto-fiat-converter .input-group {
    display: flex; }
    .crypto-fiat-converter .input-group .timer {
      margin-top: 1rem;
      margin-left: -4rem; }
  .crypto-fiat-converter__hint {
    grid-column: 3;
    margin-left: 0;
    color: var(--text-less-prominent);
    align-self: start; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.percentage-selector {
  display: flex;
  justify-content: space-around;
  width: 36rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .percentage-selector {
      width: 100%; } }
  .percentage-selector-block {
    cursor: pointer;
    background-color: var(--general-section-1);
    height: 2.4rem;
    width: 8.7rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .percentage-selector-block {
        width: 95%; } }
  .percentage-selector__block-container {
    align-items: center;
    display: flex;
    flex-direction: column; }
    @media (min-width: 320px) and (max-width: 767px) {
      .percentage-selector__block-container {
        flex: 1; } }
  .percentage-selector__text {
    margin-top: 0.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@media (min-width: 1024px) {
  .recent-transaction__wrapper {
    max-width: 25.6rem; } }

.recent-transaction__wrapper .cashier-recent-transaction {
  overflow: auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .recent-transaction__wrapper .cashier-recent-transaction {
      margin-bottom: 1rem;
      min-width: 25.6rem;
      padding: 1.6rem 2.4rem;
      border-radius: 8px;
      background-color: var(--general-section-1);
      white-space: nowrap; } }
  .recent-transaction__wrapper .cashier-recent-transaction__data-wrapper {
    display: flex;
    margin: 0.8rem 0 1.1rem;
    padding: 0.8rem 0 1.2rem;
    border-top: 1px solid var(--general-active);
    border-bottom: 1px solid var(--general-active); }
    .recent-transaction__wrapper .cashier-recent-transaction__data-wrapper > div {
      flex: 1; }
  .recent-transaction__wrapper .cashier-recent-transaction__icon {
    margin-right: 0.4rem; }
  .recent-transaction__wrapper .cashier-recent-transaction__status-wrapper {
    display: flex;
    justify-content: space-between;
    min-width: 17.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .recent-transaction__wrapper .cashier-recent-transaction__status-wrapper {
        min-width: 24.2rem; } }
  .recent-transaction__wrapper .cashier-recent-transaction__status {
    display: flex;
    align-items: center;
    align-self: flex-start; }
    .recent-transaction__wrapper .cashier-recent-transaction__status-indicator {
      display: block;
      border-radius: 50%;
      margin-right: 0.2rem;
      width: 5px;
      height: 5px;
      background-color: var(--status-warning); }
      .recent-transaction__wrapper .cashier-recent-transaction__status-indicator-successful {
        background-color: var(--status-success); }
      .recent-transaction__wrapper .cashier-recent-transaction__status-indicator-unsuccessful {
        background-color: var(--status-danger); }
  .recent-transaction__wrapper .cashier-recent-transaction__hash-wrapper {
    margin-top: 0.4rem; }
  .recent-transaction__wrapper .cashier-recent-transaction__hash {
    display: flex; }
  .recent-transaction__wrapper .cashier-recent-transaction__view-all-button {
    float: right;
    height: 2.4rem;
    padding: 0.3rem 0.8rem;
    border: 1px solid var(--border-hover);
    background-color: var(--button-tertiary-default); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.side-note--mobile {
  background-color: var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem 2.4rem;
  color: var(--text-general);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
  margin: 2.4rem 0;
  width: auto;
  text-align: left; }
  .side-note--mobile.outside-wrapper {
    margin: 2.4rem; }

.side-note__text {
  margin-bottom: 0.8rem; }

.side-note__bullet {
  background-color: var(--text-general);
  border-radius: 100%;
  margin-right: 0.8rem;
  width: 0.4rem;
  height: 0.4rem;
  flex: none;
  margin-top: 0.8rem; }
  .side-note__bullet-wrapper {
    display: flex;
    margin-top: 1.1rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.account-transfer-form__hint {
  color: var(--text-general); }
  .account-transfer-form__hint__disabled {
    color: var(--text-less-prominent); }

@media (min-width: 1024px) {
  .account-transfer-form__submit-button {
    margin: 3.4rem 0 2.4rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .account-transfer-form__submit-button {
    margin: 2.4rem 0; } }

.account-transfer-form__crypto--disabled {
  pointer-events: none; }

.account-transfer-form__crypto--percentage-selector {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 2.4rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .account-transfer-form__drop-down-wrapper {
    margin-top: 1.2rem; }
    .account-transfer-form__drop-down-wrapper .dc-dropdown__display {
      min-height: 4rem !important; } }

.account-transfer-form__drop-down {
  display: inline-block;
  min-width: 20.3rem;
  min-height: 4rem;
  line-height: 1.43;
  text-align: left;
  max-width: 40rem;
  margin: 0 auto 5.1rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-form__drop-down {
      width: 100%;
      min-width: auto;
      margin-bottom: 2.4rem; } }
  @media (min-width: 1024px) {
    .account-transfer-form__drop-down--to-dropdown {
      margin: 0 auto 3.3rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-form__drop-down--to-dropdown {
      margin-bottom: 2.4rem; } }
  .account-transfer-form__drop-down .dc-dropdown__display-text {
    width: 100%;
    align-items: center; }
  .account-transfer-form__drop-down .dc-field--error {
    padding-top: 0.5rem; }
    .account-transfer-form__drop-down .dc-field--error .link {
      pointer-events: all; }

@media (min-width: 320px) and (max-width: 767px) {
  .account-transfer-form__notes {
    padding: 1.6rem 0; } }

@media (min-width: 1024px) {
  .account-transfer-form__notes {
    margin-top: 0.8rem; } }

.account-transfer-form__notes .account-transfer-form__notes-header {
  margin-top: 0; }

.account-transfer-form__bullet {
  background-color: var(--text-general);
  border-radius: 100%;
  margin-right: 0.8rem;
  width: 0.4rem;
  height: 0.4rem;
  flex: none;
  margin-top: 0.8rem; }
  .account-transfer-form__bullet-wrapper {
    display: flex;
    margin-bottom: 0.8rem; }

.account-transfer-form__wrapper .account-transfer-form__input {
  margin-bottom: -0.8rem !important; }

.account-transfer-form__wrapper .account-transfer-form__input {
  width: -moz-fit-content;
  width: fit-content;
  min-width: 36rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-form__wrapper .account-transfer-form__input {
      margin-bottom: 2.6rem !important; }
    .account-transfer-form__wrapper .account-transfer-form__input {
      width: 100%;
      min-width: auto; } }

.account-transfer-form__currency, .account-transfer-form__balance {
  line-height: 1.43; }

.account-transfer-form__currency-icon {
  align-self: center; }

.account-transfer-form__currency-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  margin-left: 8px;
  margin-right: 8px; }

.account-transfer-form__icon {
  display: flex;
  justify-content: center; }

.account-transfer-form__balance {
  margin-left: auto; }

.account-transfer-form__form-submit {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-end; }
  .account-transfer-form__form-submit > * {
    width: auto; }
  .account-transfer-form__form-submit--align-end {
    align-items: flex-end; }
    .account-transfer-form__form-submit--align-end .cashier__form-submit-button {
      width: auto;
      width: initial; }

.account-transfer-form__loader-wrapper {
  display: flex;
  height: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-transfer-form__loader-wrapper {
      height: auto;
      height: initial; } }

@media (min-width: 1024px) {
  .account-transfer-form__form-submit {
    min-width: 36rem;
    width: -moz-fit-content;
    width: fit-content;
    margin: 2rem auto 0; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_account_transfer_switch_modal .dc-modal-header__close {
    margin: 2.4rem 1.6rem 0; }
  .dc-modal__container_account_transfer_switch_modal .dc-modal-body {
    font-size: 1.4rem; } }

.dc-modal__container_account_transfer_switch_modal .dc-modal-header__title {
  padding: 2.4rem 2.4rem 0; }

.dc-modal__container_account_transfer_switch_modal .dc-modal-body {
  padding: 2.4rem; }

.dc-modal__container_account_transfer_switch_modal .dc-modal-footer {
  padding: 0 2.4rem 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.account-transfer-no-account__button {
  margin-top: 3.2rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.cashier-onboarding {
  height: calc(100vh - 20rem); }
  @media (min-width: 320px) and (max-width: 767px) {
    .cashier-onboarding {
      height: auto;
      height: initial;
      margin-top: 2.4rem; } }
  .cashier-onboarding__loader {
    position: fixed;
    left: 0; }
  .cashier-onboarding-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cashier-onboarding-header {
        margin-right: 4rem;
        margin-left: 4rem; } }
    .cashier-onboarding-header-learn-more {
      text-align: center; }
  .cashier-onboarding-content::-webkit-scrollbar {
    display: none; }
  .cashier-onboarding-content__description {
    margin-bottom: 5rem; }
  .cashier-onboarding-detail {
    margin: 2.4rem;
    width: 62.4rem; }
    @media (max-width: 926px) {
      .cashier-onboarding-detail {
        width: auto;
        width: initial; } }
    .cashier-onboarding-detail__icons {
      position: relative;
      margin-top: auto;
      overflow: hidden;
      width: 100%; }
    .cashier-onboarding-detail__div {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: flex-start;
      padding: 1.6rem;
      position: static;
      border: 2px solid var(--border-normal-1);
      border-radius: 8px;
      margin: 0.8rem 0rem;
      cursor: pointer; }
    .cashier-onboarding-detail__content {
      display: flex;
      flex-direction: row;
      align-items: center;
      width: 100%; }
    .cashier-onboarding-detail__text {
      position: static;
      width: 100%; }
    .cashier-onboarding-detail__array {
      display: flex;
      flex-direction: row;
      align-items: center;
      position: static;
      margin-top: 1.6rem;
      gap: 1.2rem;
      width: 100%;
      white-space: nowrap; }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier-onboarding-detail__array {
          flex-direction: column;
          align-items: flex-start;
          width: 100%; } }
    .cashier-onboarding-detail__icons-array {
      display: flex;
      flex-direction: row;
      align-items: center;
      margin-right: 1.2rem; }
    .cashier-onboarding-detail__icon {
      margin-right: 1.2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .cashier-onboarding-detail__icon {
          display: inline-block; } }
  .cashier-onboarding-side-note__link {
    cursor: pointer;
    display: flex;
    align-items: center; }
    .cashier-onboarding-side-note__link:hover {
      -webkit-text-decoration: underline var(--brand-red-coral);
              text-decoration: underline var(--brand-red-coral); }
    .cashier-onboarding-side-note__link .dc-text {
      margin-right: 0.4rem; }
  .cashier-onboarding-side-note__text {
    margin-bottom: 0.8rem; }
    .cashier-onboarding-side-note__text-nowrap {
      white-space: nowrap; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.funds-protection {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 4rem; }
  .funds-protection__icon {
    width: 12.8rem;
    height: 12.8rem;
    margin-bottom: 2.4rem; }
  .funds-protection__title {
    margin-bottom: 0.8rem; }
  .funds-protection__desc {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    margin-bottom: 3.2rem;
    max-width: 67.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .funds-protection {
      width: calc(100% - 2.4rem);
      margin-left: 1.2rem; }
      .funds-protection .dc-btn:last-child {
        margin-bottom: 2.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-modal__container_usdt-note-modal .dc-modal-body {
  padding-top: 0; }

.dc-modal__container_usdt-note-modal .title {
  font-weight: bold; }

.dc-modal__container_usdt-note-modal p,
.dc-modal__container_usdt-note-modal .description {
  margin-bottom: 1rem; }

.dc-modal__container_usdt-note-modal .description {
  margin-left: 2rem;
  margin-top: 0.5rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.crypto-deposit__wrapper {
  margin: 0 auto;
  max-width: 51rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-deposit__wrapper {
      max-width: none; } }

.crypto-deposit__transaction-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  border-bottom: 2px solid var(--general-section-1);
  padding-bottom: 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-deposit__transaction-wrapper {
      margin-top: 2.4rem; } }
  .crypto-deposit__transaction-wrapper .qrcode {
    margin: 2.4rem 0; }
  .crypto-deposit__transaction-wrapper .crypto-api-error {
    display: flex;
    flex-direction: column;
    align-items: center; }
    .crypto-deposit__transaction-wrapper .crypto-api-error__text {
      display: flex;
      justify-content: space-between;
      width: auto;
      padding: 0.8rem;
      margin: 2.4rem 0;
      border-radius: 4px;
      background-color: rgba(255, 173, 58, 0.16); }
      .crypto-deposit__transaction-wrapper .crypto-api-error__text svg {
        margin-right: 0.3rem; }
    .crypto-deposit__transaction-wrapper .crypto-api-error .dc-btn {
      max-width: 6rem;
      padding: 0.3rem 0.8rem; }

.crypto-deposit__transaction-currency {
  margin: 2.4rem 0 0.8rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-deposit__transaction-currency {
      margin-bottom: 2.4rem; } }

.crypto-deposit__dropdown-menu {
  margin: 2.4rem 0 0.8rem;
  width: 55%; }

.crypto-deposit__eth-option-message {
  margin: 1.6rem 0 0; }

.crypto-deposit__clipboard-wrapper {
  display: flex;
  align-items: center;
  border-radius: 4px;
  line-height: 0;
  width: -moz-fit-content;
  width: fit-content;
  padding: 1rem 1.3rem;
  background-color: var(--general-section-1); }
  .crypto-deposit__clipboard-wrapper .dc-popover__wrapper {
    margin: 0.3rem 0.3rem 0.3rem 0.6rem; }
    .crypto-deposit__clipboard-wrapper .dc-popover__wrapper .dc-clipboard {
      width: 1.2rem;
      height: 1.4rem; }

.crypto-deposit__fiat-onramp-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center; }

.crypto-deposit__fiat-onramp-description {
  margin: 2.4rem 0; }

.crypto-deposit__fiat-onramp-button {
  margin-bottom: 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.on-ramp__page-header {
  margin-bottom: 1.7rem; }
  @media (max-width: 926px) {
    .on-ramp__page-header {
      margin: 1.7rem; } }

.on-ramp__info {
  box-shadow: 0 0.8rem 0.8rem 0 var(--shadow-drop), 0 0 0.8rem 0 var(--shadow-drop);
  padding: 1.6rem 1.6rem 0.8rem;
  border-radius: 0.8rem;
  margin-top: 1.6rem;
  width: 100%; }
  .on-ramp__info-header {
    margin-bottom: 1.6rem; }

.on-ramp__read-more {
  font-size: var(--text-size-xxs);
  color: var(--text-general);
  margin-bottom: 0.8rem; }

.on-ramp__provider {
  box-shadow: 0 0.8rem 0.8rem 0 var(--shadow-drop), 0 0 0.8rem 0 var(--shadow-drop);
  padding: 1.6rem 1.6rem 0.8rem;
  border-radius: 0.8rem;
  display: grid;
  width: 100%;
  grid-column-gap: 2.4rem;
  grid-template-areas: "logo name name" "logo description buy" "logo description buy" "logo payment-icons payment-icons"; }
  @media (max-width: 926px) {
    .on-ramp__provider {
      grid-template-areas: "logo name name name" "logo description description description" "logo description description description" "payment-icons payment-icons payment-icons buy"; } }
  .on-ramp__provider + .on-ramp__provider {
    margin: 1.6rem 0rem; }
  .on-ramp__provider-logo {
    align-self: center;
    grid-area: logo; }
    @media (max-width: 926px) {
      .on-ramp__provider-logo {
        align-self: start; } }
  .on-ramp__provider-name {
    grid-area: name;
    margin-bottom: 0.8rem; }
  .on-ramp__provider-description {
    grid-area: description;
    width: 390px;
    min-height: 60px; }
    @media (max-width: 926px) {
      .on-ramp__provider-description {
        width: auto;
        height: auto; } }
  .on-ramp__provider-payment-icons {
    position: relative;
    white-space: nowrap;
    margin-top: auto;
    grid-row: payment-icons;
    grid-column-start: payment-icons;
    overflow: hidden; }
    .on-ramp__provider-payment-icons-shadow {
      right: 0;
      top: 0;
      height: 40px;
      width: 40px;
      z-index: 1;
      position: absolute;
      background-image: var(--gradient-right-edge); }
    .on-ramp__provider-payment-icons svg {
      margin-top: auto;
      margin-right: 1.6rem; }
  .on-ramp__provider-button {
    align-self: center;
    grid-area: buy;
    justify-self: flex-end; }

.on-ramp__popup {
  color: var(--text-general); }
  .on-ramp__popup-deposit {
    display: flex;
    flex-direction: column; }
    .on-ramp__popup-deposit-address {
      display: inline-flex;
      border-radius: 4px;
      align-self: center;
      align-items: center;
      padding: 1.2rem;
      margin: 1.6rem;
      background-color: var(--general-section-2); }
      @media (min-width: 320px) and (max-width: 767px) {
        .on-ramp__popup-deposit-address {
          margin: 1.6rem 0.8rem;
          width: calc(100% - 1.6rem);
          display: flex;
          justify-content: space-around; } }
      .on-ramp__popup-deposit-address-hint {
        align-self: center; }
      .on-ramp__popup-deposit-address > div {
        width: 100%; }
      .on-ramp__popup-deposit-address-text {
        cursor: pointer;
        width: 26.5rem;
        background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;
        background: initial; }
        @media (min-width: 320px) and (max-width: 767px) {
          .on-ramp__popup-deposit-address-text {
            overflow-x: scroll !important; }
          .on-ramp__popup-deposit-address-text {
            width: calc(100% - 2rem); }
            .on-ramp__popup-deposit-address-text::-webkit-scrollbar {
              display: none; } }
        .on-ramp__popup-deposit-address-text--dark {
          color: var(--text-general); }
        .on-ramp__popup-deposit-address-text:disabled {
          opacity: 1; }
      .on-ramp__popup-deposit-address-icon {
        margin-left: 0.8rem;
        cursor: pointer; }
      .on-ramp__popup-deposit-address .dc-popover__target {
        margin-top: 0.1rem;
        display: flex;
        align-items: center; }
  .on-ramp__popup-divider {
    height: 2px;
    width: 100%;
    background-color: var(--general-section-2);
    margin: 2.4rem 0; }
  .on-ramp__popup-disclaimer-title {
    margin-bottom: 0.8rem; }
  .on-ramp__popup-disclaimer-checkbox .dc-checkbox__box {
    margin-left: 0; }
  .on-ramp__popup-buttons {
    display: flex;
    justify-content: flex-end;
    margin-top: 2.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .on-ramp__popup-buttons {
        margin-bottom: 4rem; } }
  .on-ramp__popup-no-deposit-address {
    display: flex;
    flex-direction: column; }
    .on-ramp__popup-no-deposit-address-text {
      margin-bottom: 2.4rem; }
    .on-ramp__popup-no-deposit-address-buttons {
      align-self: flex-end; }
  @media (min-width: 320px) and (max-width: 767px) {
    .on-ramp__popup .dc-hint-box__icon {
      align-self: start; }
    .on-ramp__popup .dc-hint-box__message {
      text-align: left; } }

.on-ramp__widget-container {
  padding: 0.8rem;
  overflow: visible; }
  .on-ramp__widget-container--error {
    display: flex;
    flex-flow: column;
    align-items: center; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_on-ramp__modal {
    max-width: calc(100vw - 6rem) !important;
    max-height: calc(100vh - 6rem) !important; } }

.dc-modal__container_on-ramp__modal > .dc-modal-header__title {
  padding-top: 2.4rem !important; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_on-ramp__modal > .dc-modal-body {
    overflow: scroll; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.missing-payment-method-note__title {
  margin-bottom: 0.8rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .missing-payment-method-note {
    background-color: var(--general-section-1);
    border-radius: 8px;
    padding: 1.6rem 2.4rem;
    color: var(--text-general);
    line-height: 1.5; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-detail {
  display: flex; }
  .payment-agent-detail__icon-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 0.8rem; }
  .payment-agent-detail__link {
    text-decoration: none;
    word-break: break-word; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-deposit-details {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-column-gap: 1rem;
  -moz-column-gap: 1rem;
       column-gap: 1rem;
  grid-row-gap: 0.8rem;
  row-gap: 0.8rem;
  margin-top: 3.2rem; }
  .payment-agent-deposit-details > .payment-agent-detail:nth-child(-n + 2) {
    margin-bottom: 2.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-deposit-details > .payment-agent-detail:nth-child(-n + 2) {
        margin-bottom: 0; } }
  .payment-agent-deposit-details .payment-agent-detail__icon-wrapper {
    width: 3.2rem;
    height: 3.2rem;
    background: var(--icon-grey-background);
    border-radius: 8px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-deposit-details .payment-agent-detail.deposit-commission {
      order: 5; }
    .payment-agent-deposit-details .payment-agent-detail.withdrawal_commission {
      order: 6; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-deposit-details {
      grid-template-columns: 1fr;
      margin-top: 2.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-listed-withdraw-form {
  padding: 0 1.6rem;
  margin-top: 3.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-listed-withdraw-form {
      padding: 0; } }
  .payment-agent-listed-withdraw-form__header {
    margin-bottom: 1.6rem; }
  .payment-agent-listed-withdraw-form__form {
    display: flex; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-listed-withdraw-form__form {
        flex-direction: column; } }
    .payment-agent-listed-withdraw-form__form .dc-input {
      border-right: none;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      margin-bottom: 1.8rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-listed-withdraw-form__form .dc-input {
          border: 1px solid var(--border-normal);
          border-top-right-radius: 0.4rem;
          border-bottom-right-radius: 0.4rem; }
          .payment-agent-listed-withdraw-form__form .dc-input--crypto-hint {
            margin-bottom: 2.8rem; } }
    .payment-agent-listed-withdraw-form__form .dc-btn {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-listed-withdraw-form__form .dc-btn {
          margin-top: 1.2rem;
          border-top-left-radius: 0.4rem;
          border-bottom-left-radius: 0.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-card {
  display: flex;
  flex-direction: column;
  padding: 1.6rem;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.05), 0 16px 20px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  margin-bottom: 1.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-card {
      width: auto; } }
  .payment-agent-card .dc-expansion-panel__header-container {
    align-items: flex-start; }
  .payment-agent-card .dc-expansion-panel__header-chevron-icon {
    flex-basis: 5%; }
  .payment-agent-card--dark {
    background-color: var(--general-section-1); }
  .payment-agent-card__description-container {
    display: flex;
    flex-direction: column;
    flex-basis: 95%; }
    .payment-agent-card__description-container-icons-container {
      display: flex;
      flex-wrap: wrap;
      gap: 1.6rem;
      align-items: center;
      margin-top: 1.6rem; }
      .payment-agent-card__description-container-icons-container .dc-icon {
        width: 5rem;
        height: 3.2rem; }
    .payment-agent-card__description-container-further-information {
      margin: 0.8rem 0;
      word-break: break-word; }
  .payment-agent-card__deposit-details-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 1rem;
    -moz-column-gap: 1rem;
         column-gap: 1rem;
    grid-row-gap: 0.8rem;
    row-gap: 0.8rem;
    margin-top: 3.2rem; }
    .payment-agent-card__deposit-details-container > .payment-agent-detail:nth-child(-n + 2) {
      margin-bottom: 2.4rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-card__deposit-details-container > .payment-agent-detail:nth-child(-n + 2) {
          margin-bottom: 0; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-card__deposit-details-container {
        grid-template-columns: 1fr;
        margin-top: 2.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-disclaimer__title {
  margin-bottom: 0.8rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .payment-agent-disclaimer {
    background-color: var(--general-section-1);
    border-radius: 8px;
    padding: 1.6rem 2.4rem;
    color: var(--text-general);
    line-height: 1.5; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-receipt .cashier__form-submit {
  display: flex;
  justify-content: center;
  flex-flow: row;
  margin: 0 0 3.2rem; }
  .payment-agent-receipt .cashier__form-submit-button {
    margin: 0;
    max-width: 20rem; }
    .payment-agent-receipt .cashier__form-submit-button:first-child {
      margin-right: 0.4rem; }
    .payment-agent-receipt .cashier__form-submit-button:last-child {
      margin-left: 0.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-receipt .cashier__form-submit-button {
      width: auto;
      width: initial;
      max-width: 18rem;
      padding: 0 1rem; } }

.payment-agent-receipt__header {
  margin-top: 9.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-receipt__header {
      margin-top: 3.2rem; } }
  .payment-agent-receipt__header-listed {
    margin-bottom: 4.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-receipt__header-listed {
        margin-bottom: 1.6rem; } }
  .payment-agent-receipt__header-unlisted {
    margin-bottom: 7.4rem; }

.payment-agent-receipt__transferred-contact {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  -moz-column-gap: 1.6rem;
       column-gap: 1.6rem;
  margin: 0.8rem 0 3.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-receipt__transferred-contact {
      flex-direction: column;
      align-items: center;
      row-gap: 0.8rem; } }
  .payment-agent-receipt__transferred-contact .payment-agent-detail {
    align-items: center; }
    .payment-agent-receipt__transferred-contact .payment-agent-detail__icon-wrapper {
      margin-right: 0.5rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-receipt__transferred-contact .payment-agent-detail__icon-wrapper {
          margin-right: 0.9rem; } }
    .payment-agent-receipt__transferred-contact .payment-agent-detail__desc-wrapper {
      display: flex;
      flex-direction: column; }
    .payment-agent-receipt__transferred-contact .payment-agent-detail__link {
      word-break: normal;
      font-weight: normal; }
    .payment-agent-receipt__transferred-contact .payment-agent-detail__paragraph {
      font-weight: normal; }

.payment-agent-receipt__explanation {
  margin: 0.8rem 0 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-receipt__explanation {
      width: 32rem; } }
  .payment-agent-receipt__explanation-unlisted {
    margin-bottom: 7.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.cashier-search-box {
  width: 100%;
  margin-right: 1.6rem; }
  .cashier-search-box .dc-input {
    margin-bottom: 0;
    height: 3.2rem;
    overflow: hidden; }
    .cashier-search-box .dc-input__field {
      padding: 0.6rem 3.2rem;
      height: 3.2rem; }
    .cashier-search-box .dc-input__leading-icon {
      margin-left: 0.8rem;
      top: 0.8rem; }
    .cashier-search-box .dc-input__trailing-icon {
      cursor: pointer; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-withdraw-form__page-return {
  display: flex;
  -moz-column-gap: 0.8rem;
       column-gap: 0.8rem;
  margin: 2.4rem 0;
  align-items: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-withdraw-form__page-return {
      margin: 0 0 1.6rem; } }
  .payment-agent-withdraw-form__page-return .dc-icon {
    cursor: pointer; }
  .payment-agent-withdraw-form__page-return .dc-text {
    padding-top: 1px; }

.payment-agent-withdraw-form__form {
  margin-bottom: 3.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-withdraw-form__form {
      margin-bottom: 1.6rem; } }
  .payment-agent-withdraw-form__form-account-number {
    margin-bottom: 4.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-withdraw-form__form-account-number {
        margin: 1.6rem 0 5.2rem; } }
    .payment-agent-withdraw-form__form-account-number .dc-icon {
      cursor: pointer; }
  .payment-agent-withdraw-form__form-amount {
    display: flex; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-withdraw-form__form-amount {
        flex-direction: column; } }
    .payment-agent-withdraw-form__form-amount .dc-input {
      border-right: none;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      margin-bottom: 0; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-withdraw-form__form-amount .dc-input {
          border: 1px solid var(--border-normal);
          border-top-right-radius: 0.4rem;
          border-bottom-right-radius: 0.4rem; } }
    .payment-agent-withdraw-form__form-amount .dc-btn {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0; }
      @media (min-width: 320px) and (max-width: 767px) {
        .payment-agent-withdraw-form__form-amount .dc-btn {
          margin-top: 4rem;
          border-top-left-radius: 0.4rem;
          border-bottom-left-radius: 0.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.transfer-confirm {
  padding: 0 1.6rem;
  width: 100%; }
  .transfer-confirm__header {
    margin-top: 1.4rem;
    margin-bottom: 2.4rem; }
  .transfer-confirm__column-wrapper {
    width: 100%;
    display: flex;
    justify-content: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .transfer-confirm__column-wrapper {
        flex-direction: column; } }
  .transfer-confirm__row {
    width: 40rem;
    display: flex;
    -moz-column-gap: 1.6rem;
         column-gap: 1.6rem;
    row-gap: 1.2rem;
    padding: 0.8rem 0;
    justify-content: space-between;
    border-bottom: 1px solid var(--general-section-1); }
    .transfer-confirm__row-label, .transfer-confirm__row-value {
      display: flex;
      flex-direction: column;
      row-gap: 1.2rem; }
    .transfer-confirm__row > :last-child {
      max-width: 50%; }
      .transfer-confirm__row > :last-child.description {
        word-wrap: break-word; }
  .transfer-confirm__warning-icon {
    margin-top: 0.8rem;
    min-width: 7.2rem;
    min-height: 7.2rem;
    margin-bottom: 2.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .transfer-confirm__warning-icon {
        min-width: 4.8rem;
        min-height: 4.8rem;
        margin: 1.6rem 0; } }
    .transfer-confirm__warning-icon__description {
      margin-bottom: 3.2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .transfer-confirm__warning-icon__description {
          margin-bottom: 4rem; } }
  .transfer-confirm__warnings {
    width: 40rem;
    display: flex;
    flex-direction: column;
    margin: 4rem auto 3.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .transfer-confirm__warnings {
        margin-bottom: 2.4rem; } }
    .transfer-confirm__warnings-bullet {
      background-color: var(--text-loss-danger);
      border-radius: 100%;
      margin-right: 0.8rem;
      width: 0.4rem;
      height: 0.4rem;
      flex: none;
      margin-top: 0.65rem; }
      .transfer-confirm__warnings-bullet-wrapper {
        display: flex; }
  .transfer-confirm__checkbox {
    width: 40rem; }
    .transfer-confirm__checkbox .dc-checkbox__box {
      margin-left: 0; }
  .transfer-confirm__checkbox-label {
    font-size: var(--text-size-xxs); }
  .transfer-confirm__submit {
    margin: 4rem auto 0;
    width: 40rem;
    display: flex;
    justify-content: flex-end; }
    .transfer-confirm__submit > :not(:first-child) {
      margin-left: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .transfer-confirm__submit {
        margin: 4rem auto 3.2rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .transfer-confirm__row, .transfer-confirm__warnings, .transfer-confirm__checkbox, .transfer-confirm__submit {
      width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-list__side-note-second {
  margin-top: 1.6rem !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.email-verification-empty-state {
  display: flex;
  flex: 1;
  flex-direction: column;
  align-items: center;
  justify-content: center; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-withdrawal-locked__btn-confirm {
  width: 12rem; }

.payment-agent-withdrawal-locked__text {
  margin: 2.4rem 0; }

.payment-agent-withdrawal-locked__title {
  margin-top: 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-list {
  padding: 0 4.2rem 1.6rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list {
      padding: 0; } }
  .payment-agent-list .side-note--mobile {
    padding: 0;
    margin: 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list__instructions {
      display: grid;
      grid-template-columns: 1fr;
      grid-gap: 0.8rem; } }
  @media (min-width: 320px) and (max-width: 767px) and (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list__instructions .dc-tabs__list--header--tabs--desktop {
      position: fixed;
      background-color: var(--general-main-1);
      width: 100%;
      left: 0;
      z-index: 1000;
      padding: 1.6rem 5rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-list__instructions .dc-tabs__content {
        margin-top: 7.2rem; } }
  .payment-agent-list__instructions-hide-tabs .dc-tabs__list {
    display: none; }
  .payment-agent-list__instructions-hide-tabs .dc-tabs__content {
    margin-top: 0; }
  .payment-agent-list__instructions-hide-tabs .dc-tabs__list--header--tabs--desktop {
    display: none;
    padding: 1.6rem 5rem; }
  .payment-agent-list__instructions .verification-email__icon {
    margin-top: 2.8rem; }
  .payment-agent-list__list-header {
    margin-top: 2.4rem;
    margin-bottom: 1.6rem; }
    .payment-agent-list__list-header-text {
      min-width: -moz-fit-content;
      min-width: fit-content; }
    @media (min-width: 320px) and (max-width: 767px) {
      .payment-agent-list__list-header {
        margin-top: 1.6rem; } }
  .payment-agent-list__list-selector {
    margin-bottom: 2.4rem;
    display: flex;
    justify-content: space-between; }
    .payment-agent-list__list-selector .dc-dropdown__container {
      width: 18rem; }
    .payment-agent-list__list-selector .dc-dropdown-container {
      margin-top: 0;
      min-width: 0;
      min-width: initial;
      width: auto;
      width: initial; }
    .payment-agent-list__list-selector .dc-dropdown__display {
      justify-content: flex-start; }
      .payment-agent-list__list-selector .dc-dropdown__display-text {
        padding-left: 0.8rem;
        padding-right: 3.2rem;
        color: var(--text-less-prominent);
        overflow: hidden;
        max-width: 14.6rem; }
    .payment-agent-list__list-selector .dc-dropdown__select-arrow {
      right: 10px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list__list-header {
      position: relative;
      z-index: 1; }
    .payment-agent-list__list-selector {
      margin-bottom: 1.6rem;
      flex-direction: column;
      /* postcss-bem-linter: ignore */ }
      .payment-agent-list__list-selector .dc-select-native {
        margin-top: 1.6rem; }
        .payment-agent-list__list-selector .dc-select-native__arrow {
          top: auto;
          top: initial;
          --fill-color1: var(--text-general); }
        .payment-agent-list__list-selector .dc-select-native__placeholder {
          padding: 0 0.8rem;
          background-color: var(--general-main-1);
          color: var(--text-general);
          top: auto;
          top: initial;
          left: auto;
          left: initial; }
        .payment-agent-list__list-selector .dc-select-native__display {
          height: 3.2rem; }
          .payment-agent-list__list-selector .dc-select-native__display-text {
            line-height: 3.2rem; }
        .payment-agent-list__list-selector .dc-select-native__picker {
          height: 3.2rem; }
        .payment-agent-list__list-selector .dc-select-native__wrapper {
          height: 3.2rem; } }
  .payment-agent-list__search-warning {
    row-gap: 1.6rem;
    margin-top: 6.4rem; }
  .payment-agent-list__error-dialog .dc-dialog__content {
    font-size: var(--text-size-s); }
  .payment-agent-list__error-dialog .dc-dialog__header--title {
    font-size: var(--text-size-sm); }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list__error-dialog .dc-dialog__dialog {
      width: 100%;
      margin: 0 1.6rem; }
    .payment-agent-list__error-dialog .dc-dialog__content {
      font-size: var(--text-size-xxs); }
    .payment-agent-list__error-dialog .dc-dialog__header--title {
      font-size: var(--text-size-xs); } }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-list__search-loader {
      height: auto;
      height: initial; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-transfer-form__container {
  display: block !important; }
.payment-agent-transfer-form__container {
  padding: 0 15.6rem; }

.payment-agent-transfer-form__input {
  margin-bottom: 5.1rem; }
  .payment-agent-transfer-form__input-area {
    margin-bottom: 1rem; }
    .payment-agent-transfer-form__input-area .dc-input__counter {
      top: 9.7rem;
      right: 0; }

@media (min-width: 320px) and (max-width: 767px) {
  .payment-agent-transfer-form__container {
    width: calc(100% - 3.2rem);
    margin: 0 1.6rem;
    padding: 2.4rem 0 0; }
    .payment-agent-transfer-form__container .dc-input__field[type='textarea'] {
      height: 11.9rem; }
  .payment-agent-transfer-form__input-container {
    grid-template-columns: 1fr; }
  .payment-agent-transfer-form__input-area {
    margin-bottom: 3.2rem; }
    .payment-agent-transfer-form__input-area .dc-input__counter {
      top: 11.7rem; }
  .payment-agent-transfer-form__input:not(:first-child) {
    margin-left: 0;
    margin-left: initial;
    margin-bottom: 5.3rem; }
  .payment-agent-transfer-form__submit-button {
    width: auto;
    padding: 0 1.25rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.payment-agent-transfer-receipt__wrapper .cashier__header {
  margin-bottom: 5.4rem; }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from, .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-to {
  display: flex;
  align-items: center;
  border: 1px solid var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem; }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from {
  flex-direction: row-reverse;
  gap: 1rem; }
  .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from > .cashier__transferred-details {
    text-align: right; }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-from, .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-to {
  text-align: left; }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-from {
  margin-bottom: 3.5rem;
  margin-top: 2.5rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-from {
      margin-bottom: 4rem; } }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-to {
  margin-bottom: 1.7rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-to {
      margin-bottom: 5rem; }
      .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-to:not(.dc-select-native--error) {
        margin-bottom: 2.2rem; } }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .dc-icon {
  width: 3.2rem;
  height: 3.2rem; }

.payment-agent-transfer-receipt__wrapper .cashier__form-submit {
  flex-flow: row;
  justify-content: center;
  text-align: center; }
  .payment-agent-transfer-receipt__wrapper .cashier__form-submit-button {
    margin: 0;
    width: auto;
    min-width: 18.9rem;
    max-width: 23.4rem; }
    .payment-agent-transfer-receipt__wrapper .cashier__form-submit-button:first-child {
      margin-right: 0.4rem; }
    .payment-agent-transfer-receipt__wrapper .cashier__form-submit-button:last-child {
      margin-left: 0.4rem; }

.payment-agent-transfer-receipt__wrapper .cashier__transferred-icon {
  width: 1.6rem !important;
  height: 1.6rem !important; }

.payment-agent-transfer-receipt__wrapper .cashier__success {
  margin-bottom: 0.8rem;
  width: 100%; }

@media (min-width: 320px) and (max-width: 767px) {
  .payment-agent-transfer-receipt__wrapper {
    padding-top: 1.6rem; }
    .payment-agent-transfer-receipt__wrapper .cashier__header {
      margin-top: 3rem;
      margin-bottom: 4.8rem; }
    .payment-agent-transfer-receipt__wrapper .cashier__form-submit-button:first-child {
      margin: 0.4rem;
      width: 100%; }
    .payment-agent-transfer-receipt__wrapper .cashier__form-submit-button:last-child {
      width: 100%;
      margin: 0.4rem;
      padding: 0; }
    .payment-agent-transfer-receipt__wrapper .cashier__success {
      width: 100%;
      background-color: var(--general-main-1);
      padding: 0.4rem 0.4rem 0.8rem;
      margin-bottom: 1.6rem; }
    .payment-agent-transfer-receipt__wrapper .cashier__transferred-details {
      display: flex;
      flex-direction: column;
      justify-content: center;
      max-width: 100%;
      padding: 0; }
      .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper {
        flex-direction: column; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-from {
          flex-direction: row-reverse;
          margin-bottom: 1.6rem; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-to {
          margin-top: 1.6rem; }
          .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__transfer-details-to .cashier__transferred-details {
            text-align: center; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__receipt .cashier__header {
          padding-top: 1.6rem; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__receipt .cashier__transferred-details {
          margin-top: 0.8rem; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__receipt .cashier__text--right {
          text-align: center; }
        .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__receipt-form-submit {
          display: flex;
          flex-flow: row;
          justify-content: center; } }
        @media (min-width: 320px) and (max-width: 767px) and (min-width: 320px) and (max-width: 767px) {
          .payment-agent-transfer-receipt__wrapper .cashier__transferred-details-wrapper .account-transfer__receipt-form-submit {
            flex-direction: column; } }

@media (min-width: 320px) and (max-width: 767px) {
    .payment-agent-transfer-receipt__wrapper .cashier__transferred-icon {
      margin: 0;
      transform: rotate(270deg); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.crypto-withdraw-form {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 4rem; }
  .crypto-withdraw-form__submit {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
    margin: 2rem auto 0; }
    @media (min-width: 1024px) {
      .crypto-withdraw-form__submit {
        min-width: 36rem;
        width: -moz-fit-content;
        width: fit-content; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-withdraw-form__submit {
        align-items: flex-end; } }
    .crypto-withdraw-form__submit > * {
      width: auto; }
  .crypto-withdraw-form__icon {
    margin: 2.4rem 0 0.4rem; }
  .crypto-withdraw-form__percentage-selector {
    margin-bottom: 1.6rem;
    width: -moz-fit-content;
    width: fit-content; }
    @media (min-width: 320px) and (max-width: 767px) {
      .crypto-withdraw-form__percentage-selector {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.crypto-withdraw-receipt__detail {
  display: inline-block; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-withdraw-receipt__detail {
      margin-bottom: 2.6rem !important; }
    .crypto-withdraw-receipt__detail {
      width: 100%;
      min-width: auto; } }

.crypto-withdraw-receipt__button {
  margin-top: 3rem;
  height: 4rem; }
  .crypto-withdraw-receipt__button-left {
    margin-right: 0.8rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-withdraw-receipt__button-wrapper {
      display: flex;
      flex-direction: column;
      justify-content: center;
      margin-bottom: 4rem; } }

.crypto-withdraw-receipt__icon {
  margin: 1.6rem; }

.crypto-withdraw-receipt__status {
  margin-bottom: -0.8rem !important; }

.crypto-withdraw-receipt__status {
  background-color: var(--general-section-1);
  border-radius: 8px;
  height: 3.2rem;
  width: -moz-fit-content;
  width: fit-content;
  min-width: 36rem;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-withdraw-receipt__status {
      margin-bottom: 2.4rem !important; }
    .crypto-withdraw-receipt__status {
      width: 100%;
      min-width: auto; } }
  .crypto-withdraw-receipt__status-icon {
    margin: 0 0.4rem; }

.crypto-withdraw-receipt__crypto {
  min-width: 36rem;
  margin: 1.6rem 0; }

.crypto-withdraw-receipt__account-info {
  padding: 1rem 0;
  width: -moz-fit-content;
  width: fit-content;
  min-width: 36rem;
  border: 1px solid var(--border-normal);
  border-radius: 8px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .crypto-withdraw-receipt__account-info {
      width: 100%;
      min-width: auto; } }
  .crypto-withdraw-receipt__account-info-detail {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    max-width: 100%;
    padding: 0;
    margin: 0.8rem; }
    .crypto-withdraw-receipt__account-info-detail-text {
      margin: 0 0.4rem;
      word-break: break-word;
      max-width: 30rem; }
  .crypto-withdraw-receipt__account-info-address {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    margin: 0.4rem; }

